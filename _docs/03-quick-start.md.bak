---
title: Quick Start
permalink: /quick-start
excerpt: "How to take off fast!"

author_profile: false
author: Twist Apps

#toc: false

#classes: wide

---

After [adding Modula to your project](/install), it's time to make your first module!

## Creating Modules
To create a basic module, simply derive from `Module` class. As we imagine, 
a module should represent a relatively small self-contained part 
of your bigger entity/behaviour. Some examples, these things could become good modules:
- Engine/Transmission of a car
- Camera setup for the player
- Shooting logic for guns in your awesome FPS ;)

> **Notice from the author**:<br>
> I've made a blog post, which uses less
> formal language, digging deeper into the concept.
> Could recommend reading it, especially if you want the answers to these questions:
> - What's the concept in easy words?
> - I got the idea. These concepts are easy as a self-made solutions, why Modula?
>
> [Read](#link){: .btn .btn--warning .btn--large}

### Usage Example

{% capture notice-text %}
**I've made a blog post**, which uses less
formal language and digging deeper into the concept at once.
Could really recommend reading it, especially if you want the answers to these questions:
- What's the concept in easy words
- These concepts are easy as a self-made solutions, why Modula?
  
[Read post](#link)
{% endcapture %}

<div class="notice--info">
  {{ notice-text | markdownify }}
</div>
[Read](#link){: .btn .btn--success .btn--primary}


I decided to put some less abstract examples first in this topic to make sure
the concept really _clicks_ for you. o/
{: .notice--success }

_Imagine,_ you have some human characters set up that are able 
to run around on a level of your game.
All these characters are almost the same,
but most of them are controlled by AI and the last one should be the player. 

Using Modula, you could create a module called `PlayerControls`, and
the other one - `AiControls`. Then you _write code (as we all like)_, 
specifying how each of these types changes the character's (which that's attached to) movement.
Then you add _PlayerControls_ to the player character, and _AiControls_ to all the other ones.

_Voila!!_ - You didn't even touch the code inside any other scripts but these new ones you made.
You don't need to exactly know how human characters work.
It should be great for team projects, 
or if you forget how your own code works 2 weeks after publishing it.



### Making example behaviour

**Step 1** - create new _[main script](/module-features#main-)_ that supports modules:
- Create new MonoBehaviour script
- use namespace `Modula`
- change inheritance to `ModularBehaviour`

{% highlight C# %}using Modula;


public class ModularExample : ModularBehaviour
{

}{% endhighlight %}

**Step 2** - create your first _module_
- Create new MonoBehaviour script
- use namespace `Modula`
- change inheritance to `Module`

{% highlight C# %}using Modula;


public class ExampleModule : Module
{

}{% endhighlight %}

**Step 3** - add support for `ExampleModule` in `ModularExample`
- Get back to your behaviour script
- Override `AvailableModules` field

{% highlight C# %}
public class ModularExample : ModularBehaviour
{
    public override TypeList AvailableModules { get; } 
        = new TypeList()
        .Add(typeof(ExampleModule));
}{% endhighlight %}

**Step 4** - create GameObject for your new behaviour
- in Unity, go to Hierarchy window > "+" > Create Empty
- select the created object
- click "Add Component" > ModularExample

**Done!** now you can add or remove your module in Inspector window by clicking
"Add ExampleModule" / "Remove"
{: .notice--success }

#### Result
![result image](/assets/img/modular-example.gif)
{: .notice}